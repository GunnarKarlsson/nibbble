<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:dribbleservice2="services.dribbleservice2.*"
		xmlns:comp = "components.*"
		title="{data.shotType}"
		viewActivate="init()"
		destructionPolicy="never"
		tabBarVisible="false" >
	
	<fx:Declarations>
		<s:HTTPService id="service" url="{_url}"
					   result="serviceResultHandler(event)" request="{_serviceRequestParams}"/>
	</fx:Declarations>
	
	<s:navigationContent>
		<s:Button icon="@Embed(source='assets/icons/nibbbleLogo.png')" click="onClickMenuIcon(event)"/>	
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button icon="@Embed(source='assets/icons/refresh48x48.png')" 
				  click="refreshList()"/>
		<s:Button id="menuButton" icon="@Embed(source='assets/icons/Dribble-Client-Menu-Icon.png')" click="onClickMenuIcon(event)"/>
	</s:actionContent>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import components.AlertPopUp;
			import components.PlayerHeader;
			
			import eventSystem.EventCentral;
			import eventSystem.events.CustomEvent;
			
			import helpers.ShotVOArrayCollectionPopulator;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import utils.ImageListService;
			
			import valueObjects.MenuItemVO;
			import valueObjects.PlayerVO;
			import valueObjects.ShotTypeVO;
			import valueObjects.ShotVO;
			
			[Bindable]
			private var _shotVOs:ArrayCollection = new ArrayCollection(new Array());
			
			private var _pageNumber:int = 1;
			private var _shotsPerPage:int = 15;
			
			[Bindable]
			private var _serviceRequestParams:Object;
			[Bindable]
			private var _url:String;
			
			private var _imageListService:ImageListService = new ImageListService();
			
			[Bindable]
			private var _pageChangeGroupWidth:int =FlexGlobals.topLevelApplication.stage.stageWidth;
			
			[Bindable]
			private var _playerHeader:PlayerHeader = new PlayerHeader();
			
			private function refreshList():void{
				init();
			}
			
			private function init():void{
				trace("msv w: "+FlexGlobals.topLevelApplication.stage.stageWidth);
				if(_shotVOs.length < 1){ 
					callService();
				}
			}
			
			private function onClickMenuIcon(event:MouseEvent=null):void{
				var alert:AlertPopUp = new AlertPopUp();
				alert.addEventListener(PopUpEvent.CLOSE, onCloseAlert);
				alert.show("message");
			}
			
			private function onCloseAlert(event:Event):void{
				trace("this closes Alert");
			}
			
			private function callService():void{
				trace(data.getViewType());
				
				switch(data.getViewType()){
					case MenuItemVO.MULTIPLE_PLAYERS_SHOTS_VIEW:
						if(headerContainer.contains(_playerHeader))headerContainer.removeElement(_playerHeader);
						_url = "http://api.dribbble.com/shots/"+ data.getTitle();
						serviceCall();
						break;
					
					case PlayerVO.SINGLE_PLAYERS_SHOTS_VIEW:
						if(!headerContainer.contains(_playerHeader)){
							headerContainer.addElement(_playerHeader);
							_playerHeader.username = data.username;
							_playerHeader.imageSource = data.avatarImage;
							_playerHeader.playerVO = data as PlayerVO;
						}
						_url = "http://api.dribbble.com/players/"+data.id+"/shots";
						
						serviceCall();
						break;
					
					case MenuItemVO.BOOKMARKED_SHOTS:
						if(headerContainer.contains(_playerHeader))headerContainer.removeElement(_playerHeader);
						destructionPolicy="none";
						EventCentral.getInstance().addEventListener(CustomEvent.DISPATCH_OF_BOOKMARKED_SHOTS_FROM_REPOSITORY,
							onReceiptOfBookmarkedShotsFromRepository);
						EventCentral.getInstance().dispatchEvent(new CustomEvent(CustomEvent.REQUEST_FOR_BOOKMARKED_SHOTS_FROM_REPOSITORY));
				}
				
			}
			
			private function onReceiptOfBookmarkedShotsFromRepository(event:CustomEvent):void{
				trace("msv onreceipt from repo");
				var idList:Array = event.data;
				EventCentral.getInstance().addEventListener(CustomEvent.IMAGE_LIST_READY,onImageListReady);
				_imageListService.execute(idList);
			}
			
			private function onImageListReady(event:CustomEvent):void{
				trace("msv onImagelistready");
				_shotVOs = _imageListService.getImageList();
			}
			
			private function serviceCall():void{
				_serviceRequestParams = new Object();
				_serviceRequestParams.per_page = _shotsPerPage;
				_serviceRequestParams.page = _pageNumber;
				
				service.send();
			}
			
			private function serviceResultHandler(event:ResultEvent):void{
				_shotVOs.removeAll();
				
				var obj:Object = JSON.decode(service.lastResult.toString());
				
				trace("obj.pages"+obj.pages);
				trace("obj.total"+obj.total);
				
				_shotVOs = ShotVOArrayCollectionPopulator.execute(obj);
				
			}
			
			private function listChangeHandler(event:MouseEvent):void{
				if(listDisplay!=null){
					if(listDisplay.selectedItem!=null){
						navigator.pushView(SingleShotView, listDisplay.selectedItem);
					}
				}
			}
			
			private function getOlderPage():void{
				if(_shotVOs.length > 0){
					_pageNumber++;
					callService();
				}
			}
			
			private function getNewerPage():void{
				if(_shotVOs.length > 0){
					if(_pageNumber>1)_pageNumber--;
					callService();
				}
			}
		
		]]>
	</fx:Script>
	
	<s:layout>
		 <s:VerticalLayout id="layout" horizontalAlign="center" verticalAlign="middle" paddingLeft="10" paddingRight="10"/>
	 </s:layout>
	
	<s:Group id="headerContainer"/>
	
	<s:List id="listDisplay" contentBackgroundAlpha="0"
			itemRenderer="itemRenderers.ShotItemRenderer" width="100%" height="100%" dataProvider="{_shotVOs}" click="listChangeHandler(event)">
		<s:layout>
			<s:TileLayout paddingLeft="5" paddingRight="5" paddingTop="10" columnAlign="justifyUsingWidth"/>
		</s:layout>
	</s:List>
	
	<s:HGroup width="{_pageChangeGroupWidth}" height="40" gap="0" left="0" right="0" bottom="1">
		<s:Button label="newer" width="100%" click="getNewerPage()" />
		<s:Button width="100%" height="49" label="older" click="getOlderPage()" />
	</s:HGroup>
		
	
</s:View>
