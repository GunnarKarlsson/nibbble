<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:dribbleservice2="services.dribbleservice2.*"
		title="popular"
		viewActivate="getEveryoneList()"
		destructionPolicy="never"
		tabBarVisible="false">
	
	<fx:Declarations>
		<s:CallResponder id="DribbleService2Result" result="parseResult()"/>
		<dribbleservice2:DribbleService2 id="dribbleService2"/>
	</fx:Declarations>
	
	<s:navigationContent>
		<s:Button icon="@Embed(source='assets/icons/nibbbleLogo.png')" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button icon="@Embed(source='assets/icons/refresh48x48.png')" 
				  click="refreshList()"/>
	</s:actionContent>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			import valueObjects.PlayerVO;
			import valueObjects.ShotVO;
			
			[Bindable]
			private var _shotVOs:ArrayCollection = new ArrayCollection(new Array());
			
			private function refreshList():void{
				getEveryoneList();
			}
			
			private function getEveryoneList():void{
				DribbleService2Result.token = dribbleService2.DribbleService2(15);
			}
			
			private function parseResult():void{
				_shotVOs.removeAll();
				
				var obj:Object = JSON.decode(DribbleService2Result.lastResult);
				
				for(var i:int = 0; i < obj.shots.length;i++){	
					var shotVO:ShotVO = new ShotVO(obj.shots[i].image_teaser_url,obj.shots[i].image_url);
					
					//populate shotVO
					shotVO.id = obj.shots[i].id;
					shotVO.title = obj.shots[i].title;
					shotVO.shortUrl = obj.shots[i].short_url;
					shotVO.width = obj.shots[i].width;
					shotVO.height = obj.shots[i].height;
					shotVO.viewsCount = obj.shots[i].views_count;
					shotVO.likesCount = obj.shots[i].likes_count;
					shotVO.commentsCount = obj.shots[i].comments_count;
					shotVO.reboundsCount = obj.shots[i].rebounds_count;	
					shotVO.reboundsSourceId = obj.shots[i].rebounds_source_id;
					shotVO.createdAt = obj.shots[i].created_at;
					
					//populate shotVO's player Object
					shotVO.player = new PlayerVO();		
					var player:Object = obj.shots[i].player as Object;
					
					shotVO.player.id 					= player.id as int;
					shotVO.player.name 					= player.name as String;
					shotVO.player.username 				= player.username as String;
					shotVO.player.url 					= player.url as String;
					shotVO.player.avatarUrl 			= player.avatar_url as String;
					shotVO.player.location 				= player.location as String;
					shotVO.player.twitterScreenName 	= player.twitter_screen_name as String;
					shotVO.player.draftedByPlayerId 	= player.drafted_by as int;
					shotVO.player.shotsCount 			= player.shots_count as int;
					shotVO.player.drafteesCount 		= player.draftees_count as int;
					shotVO.player.followersCount 		= player.followers_count as int;
					shotVO.player.followingCount 		= player.following_count as int;
					shotVO.player.commentsCount 		= player.comments_count as int;
					shotVO.player.commentsReceivedCount = player.comments_received_count as int;
					shotVO.player.likesCount 			= player.likes_count as int;
					shotVO.player.likesReceivedCount 	= player.likes_received_count as int;
					shotVO.player.reboundsCount 		= player.rebounds_count as int;
					shotVO.player.createdAt 			= player.created_at as String;
				
					trace(shotVO.player.username);
					
					_shotVOs.addItem(shotVO);
				}
			}
			
			private function listChangeHandler(event:IndexChangeEvent):void
			{
				var item:Object = listDisplay.dataProvider.getItemAt(event.newIndex);
				navigator.pushView(ShotView, item);
			}
		]]>
	</fx:Script>
	<s:List id="listDisplay" width="100%" height="100%" 
			dataProvider="{_shotVOs}"
			change="listChangeHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer fontSize="25"
									labelField="title"
									decorator="{data.teaserImage}"/>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
</s:View>
