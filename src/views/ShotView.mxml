<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="closeup"
		viewActivate="viewActivateHandler()"
		viewDeactivate="viewDeactivateHandler(event)"
		tabBarVisible="false">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DropShadowFilter id="dropShaText" distance="1" angle="90" blurX="0" blurY="0" alpha="1" color="0xffffff" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.sensors.Accelerometer;
			
			import mx.events.ResizeEvent;
			
			import spark.events.ViewNavigatorEvent;
			
			//needs to be a field to dispatch update events
			private var meter:Accelerometer = new Accelerometer();
			
			private function viewActivateHandler():void{
				
				if(Accelerometer.isSupported) {
					meter.setRequestedUpdateInterval(0);
					meter.addEventListener(AccelerometerEvent.UPDATE, movementDetected);	
				}else{
					trace("Accelerometer not supported!");
				} 	
			}
			
			private function movementDetected(event:AccelerometerEvent):void{
				var orientation:String = stage.deviceOrientation;
				if(orientation == "default"){
					currentState = "portrait";
				}else if(orientation == "upsideDown"){
					currentState = "portrait";
				}else if(orientation == "rotatedLeft"){
					currentState = "landscape";
				}else if(orientation == "rotatedRight"){
					currentState = "landscape";
				}
			}
			
			protected function viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				meter.removeEventListener(AccelerometerEvent.UPDATE,movementDetected);				
			}
			
			private function onPlayerClick(event:Event):void{
				trace("player clicked");
			}
			
		]]>
	</fx:Script>
	
	
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landscape"/>
	</s:states>

	
	<s:navigationContent>
		<s:Button icon="@Embed(source='assets/icons/nibbbleLogo.png')" />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button label="shot details" click="navigator.pushView(views.DetailsView, data)"/>
	</s:actionContent>
	
	<s:layout.portrait>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</s:layout.portrait>
		
	<s:layout.landscape>
		<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
	</s:layout.landscape>	
	<s:Image source="{data.image}" />
	
	<s:VGroup>
		<s:HGroup verticalAlign.portrait="middle">
			<s:Image id="playerImage" source="@Embed(source='assets/icons/PlayerIconGrey50x50.png')"
					 y.portrait="-13" width.portrait="50" height.portrait="50"
					 click="navigator.pushView(views.PlayerView, data.player)"/>
			<s:Label text="{data.player.username}" verticalAlign="bottom"
					 fontSize="20"
					 filters="{[dropShaText]}"/>
		</s:HGroup>
		
		<s:HGroup verticalAlign.portrait="middle">
			<s:Image source="@Embed(source='assets/icons/ViewsIconGrey50x50.png')"
					 y.portrait="-9" width.portrait="50" height.portrait="50"/>
			<s:Label text="{data.viewsCount}" verticalAlign="bottom"
					 fontSize="20"
					 filters="{[dropShaText]}"/>
		</s:HGroup>
		<s:HGroup verticalAlign.portrait="middle">
			<s:Image source="@Embed(source='assets/icons/LikesIconGrey50x50.png')"
					 y.portrait="-8" width.portrait="50" height.portrait="50"/>
			<s:Label text="{data.likesCount}"
					 fontSize="20"
					 filters="{[dropShaText]}"/>
		</s:HGroup>
		<s:HGroup fontSize="20" verticalAlign="middle">
			<s:Image source="@Embed(source='assets/icons/CommentsGreyIcon50x50.png')"
					 y.portrait="-9" width.portrait="50" height.portrait="50"/>
			<s:Label text="{data.commentsCount}"
					 filters="{[dropShaText]}"/>
		</s:HGroup>
		<s:HGroup fontSize="20" verticalAlign="middle">
			<s:Image source="@Embed(source='assets/icons/FollowingIconGrey50x50.png')"
					 y.portrait="-9" width.portrait="50" height.portrait="50"
					 click="navigator.pushView(views.FollowingView, data.player)"/>
			<s:Label text="{data.player.followingCount}"
					 filters="{[dropShaText]}"/>
		</s:HGroup>
		
	</s:VGroup>
	

</s:View>
